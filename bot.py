from telegram import (
    Update, ReplyKeyboardMarkup, InlineKeyboardMarkup,
    InlineKeyboardButton, InputMediaPhoto
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler, CallbackQueryHandler
)
import asyncio
import requests
import json
import os

places_data = {}


# def load_places_data():
#     with open("places.json", "r", encoding="utf-8") as f:
#         return json.load(f)

def load_places_from_github():
    url = "https://raw.githubusercontent.com/idar1504/photos_MustGoMsk_bot/main/places.json"
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        data = response.json()
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å GitHub")
        return data
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å GitHub:", e)
        return None


TOKEN = "5847682014:AAFhiFUbNhxt-St2tzMGUqiFuEukCKElOPg"

MOSCOW_LAT = 55.7558
MOSCOW_LON = 37.6173

WEATHER_CHOICE, ENTER_CITY = range(2)
STATION_CHOICE, ACTIVITY_CHOICE, SUGGEST_PLACE, DONATE = range(4)

ADMIN_CHAT_ID = 691634637

INVITE_WAIT_PHOTO = 10

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    [
        ["/help"],
        ["/weather", "/add"],
        ["/supportus", "/invitation"]
    ],
    resize_keyboard=True
)


# places_data =

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! –Ø, –î–∞—à–∞-–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ! –ü–æ –∫–æ–º–∞–Ω–¥–µ:\n"
        "/help¬†‚Äî –≤—ã–±–æ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ\n"
        "/weather¬†‚Äî –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ\n"
        "/add¬†‚Äî –¥–æ–±–∞–≤—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞\n"
        "/supportus ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞\n"
        "/invitation ‚Äî –ø–æ–ø–∞—Å—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç\n"
        "–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá",
        reply_markup=main_keyboard
    )


# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–∞–∫—É—é —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ —Ö–æ—á–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å?")
    return STATION_CHOICE


async def choose_station(update: Update, context: ContextTypes.DEFAULT_TYPE):
    station = update.message.text
    context.user_data["station"] = station

    global places_data

    new_data = load_places_from_github()
    if new_data:
        places_data = new_data  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å

    station = update.message.text
    station = station.strip().lower()
    context.user_data["station"] = station

    if station in places_data:
        keyboard = [
            ["–±–∞—Ä—ã –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", "–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"],
            ["—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–ø–∞—Ä–∫–∏/—Å–∫–≤–µ—Ä—ã"],
            ["–º—É–∑–µ–∏", "–¢–¶/–¢–†–¶"]
        ]
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤–µ—á–µ—Ä:",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return ACTIVITY_CHOICE
    else:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–π —Å—Ç–∞–Ω—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é.")
        return STATION_CHOICE


async def choose_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    activity = update.message.text
    station = context.user_data.get("station")

    if not station or station not in places_data or activity not in places_data[station]:
        await update.message.reply_text(
            "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ —ç—Ç–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.",
            reply_markup=main_keyboard  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        )
        return ConversationHandler.END

    context.user_data["places"] = places_data[station][activity]
    context.user_data["place_index"] = 0
    await show_place(update, context, edit=False)
    return ConversationHandler.END


async def show_place(update_or_query, context, edit=True):
    places = context.user_data["places"]
    index = context.user_data["place_index"]
    place = places[index]

    text = f"<b>{place['name']}</b>\n{place['desc']}"
    keyboard = [
        [InlineKeyboardButton("–•–æ—á—É —Å—é–¥–∞!", url=place['yandex'])],
        [InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="prev"),
         InlineKeyboardButton("‚û°Ô∏è", callback_data="next")]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    image_url = place.get("image")

    if edit and isinstance(update_or_query, Update):
        query = update_or_query.callback_query
        try:
            if image_url:
                await query.edit_message_media(
                    media=InputMediaPhoto(media=image_url, caption=text, parse_mode="HTML"),
                    reply_markup=markup
                )
            else:
                raise ValueError("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        except Exception as e:
            print("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", e)
            try:
                await query.edit_message_caption(caption=text, parse_mode="HTML", reply_markup=markup)
            except Exception as e2:
                print("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∏:", e2)
        await query.answer()
    else:
        try:
            if image_url:
                await update_or_query.message.reply_photo(
                    photo=image_url,
                    caption=text,
                    parse_mode="HTML",
                    reply_markup=markup
                )
            else:
                raise ValueError("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        except Exception as e:
            print("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", e)
            await update_or_query.message.reply_text(
                text,
                parse_mode="HTML",
                reply_markup=markup
            )

        await update_or_query.message.reply_text(
            "–í—ã–±–∏—Ä–∞–π —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É ‚¨áÔ∏è",
            reply_markup=main_keyboard
        )


async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    if "places" not in context.user_data or "place_index" not in context.user_data:
        await query.answer("–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∞–Ω—Ü–∏—é –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    if data == "next":
        context.user_data["place_index"] = (context.user_data["place_index"] + 1) % len(context.user_data["places"])
    elif data == "prev":
        context.user_data["place_index"] = (context.user_data["place_index"] - 1) % len(context.user_data["places"])

    await show_place(update, context)


# /weather
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    weather_info = get_weather_moscow()
    await update.message.reply_text(weather_info, reply_markup=main_keyboard)


def get_weather_moscow():
    url = "https://api.open-meteo.com/v1/forecast"
    params = {
        "latitude": MOSCOW_LAT,
        "longitude": MOSCOW_LON,
        "current_weather": True
    }
    try:
        response = requests.get(url, params=params, timeout=5)
        response.raise_for_status()
        data = response.json()["current_weather"]
        temp = data["temperature"]
        wind = data["windspeed"]
        weather_code = data["weathercode"]
        description = weather_code_to_text(weather_code)
        return f"üåÜ –°–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ:\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\nüí® –í–µ—Ç–µ—Ä: {wind} –∫–º/—á\n‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {description}"
    except Exception:
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."


def weather_code_to_text(code):
    codes = {
        0: "—è—Å–Ω–æ", 1: "–≤ –æ—Å–Ω–æ–≤–Ω–æ–º —è—Å–Ω–æ", 2: "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å", 3: "–ø–∞—Å–º—É—Ä–Ω–æ",
        45: "—Ç—É–º–∞–Ω", 48: "–∏–∑–º–æ—Ä–æ–∑—å", 51: "–ª—ë–≥–∫–∞—è –º–æ—Ä–æ—Å—å", 53: "–º–æ—Ä–æ—Å—å", 55: "—Å–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å",
        61: "–ª—ë–≥–∫–∏–π –¥–æ–∂–¥—å", 63: "–¥–æ–∂–¥—å", 65: "—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
        71: "–ª—ë–≥–∫–∏–π —Å–Ω–µ–≥", 73: "—Å–Ω–µ–≥", 75: "—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥",
        80: "–∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–∂–¥–∏", 81: "–¥–æ–∂–¥–∏", 82: "–ª–∏–≤–µ–Ω—å",
    }
    return codes.get(code, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–≥–æ–¥–∞")


# /add
async def add_place(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–•–æ—á–µ—à—å –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–µ—Å—Ç–æ? ‚ú®\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<–ù–∞–∑–≤–∞–Ω–∏–µ>\n<–û–ø–∏—Å–∞–Ω–∏–µ>\n<–°—Å—ã–ª–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã>"
    )
    return SUGGEST_PLACE


async def process_suggestion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    suggestion = update.message.text
    user = update.effective_user

    with open("suggestions.txt", "a", encoding="utf-8") as file:
        file.write(f"{user.first_name} ({user.id}):\n{suggestion}\n\n")

    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"üì© –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç @{user.username or user.first_name}:\n\n{suggestion}"
        )
    except:
        pass

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–≤–æ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é üëç", reply_markup=main_keyboard)
    return ConversationHandler.END


# /supportus
async def supportus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∏–û–ø–ª–∞—Ç–∞", url="https://www.tinkoff.ru/rm/r_ppdlToypds.uMVYStqMlk/A7AVK34316")]
    ])
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç!\n"
        "–õ—é–±–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è üôå",
        reply_markup=keyboard
    )


async def support_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    amount = update.message.text
    await update.message.reply_text(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: https://example.com/pay?sum={amount}",
                                    reply_markup=main_keyboard)
    return ConversationHandler.END


# /invitation
async def process_invite_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    photo = update.message.photo[-1]  # —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ

    caption = (
        f"üì• –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –≤ —á–∞—Ç\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or user.first_name}\n"
        f"üÜî ID: {user.id}"
    )

    try:
        await context.bot.send_photo(
            chat_id=ADMIN_CHAT_ID,
            photo=photo.file_id,
            caption=caption
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:", e)

    await update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    return ConversationHandler.END


async def invitation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∏–û–ø–ª–∞—Ç–∞", url="https://www.tinkoff.ru/rm/r_ppdlToypds.uMVYStqMlk/A7AVK34316")]
    ])
    await update.message.reply_text(
        "–í –Ω–∞—à–µ–º –∑–∞–∫—Ä—ã—Ç–æ–º —á–∞—Ç–µ —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
        "- –ù–∞—Ö–æ–¥–∏—Ç—å –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ –ø–æ –ú–æ—Å–∫–≤–µ\n"
        "- –û–±—Å—É–∂–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞\n"
        "- –î–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –∏ —Ñ–æ—Ç–æ\n\n"
        "–î–æ—Å—Ç—É–ø —Å—Ç–æ–∏—Ç 99 —Ä—É–±–ª–µ–π. –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞. –û–∂–∏–¥–∞–Ω–∏–µ –Ω–µ –±–æ–ª—å—à–µ 12 —á–∞—Å–æ–≤!",
        reply_markup=keyboard
    )
    return INVITE_WAIT_PHOTO


# –û–±—â–∏–π –≤—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ üëá", reply_markup=main_keyboard)
    return ConversationHandler.END


# main
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("weather", weather))
    app.add_handler(CallbackQueryHandler(callback_handler))

    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("add", add_place)],
        states={SUGGEST_PLACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_suggestion)]},
        fallbacks=[MessageHandler(filters.COMMAND, cancel)]
    ))

    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("supportus", supportus)],
        states={DONATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, support_response)]},
        fallbacks=[MessageHandler(filters.COMMAND, cancel)]
    ))

    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("help", help_command)],
        states={
            STATION_CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_station)],
            ACTIVITY_CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_activity)],
        },
        fallbacks=[MessageHandler(filters.COMMAND, cancel)]
    ))

    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("invitation", invitation)],
        states={
            INVITE_WAIT_PHOTO: [MessageHandler(filters.PHOTO, process_invite_photo)]
        },
        fallbacks=[MessageHandler(filters.COMMAND, cancel)]
    ))

    await app.initialize()
    await app.start()
    bot_info = await app.bot.get_me()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print(f"üîó https://t.me/{bot_info.username}")
    await app.updater.start_polling()
    await asyncio.Event().wait()


# –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    import asyncio
    asyncio.run(main())